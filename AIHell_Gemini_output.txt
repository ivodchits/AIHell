This is a fascinating and ambitious project! Building a psychological horror text adventure with AI-driven narrative generation is a fantastic concept. Here's a plan to develop your game, broken down into key parts and elements:
I. Concept & Design Phase (Pre-Production)
* 1. Core Concept Refinement:
   * Theme & Tone: Solidify the specific themes and tone you want to explore in each level. "Deeper circles of hell" is a great starting point. Think about:
      * Level 1 (Surface): Anxiety, superficial fears, mundane dread.
      * Level 2: Isolation, paranoia, loss of control.
      * Level 3: Existential dread, meaninglessness, inner turmoil.
      * Level 4: Obsession, compulsion, self-destruction.
      * Level 5 (Deepest): Despair, annihilation of self, confrontation with the abyss.
   * Psychological Focus: Decide what aspects of the player's psyche you want to engage with. Fear of the unknown? Moral dilemmas? Self-reflection?
   * "Analysis" Mechanics: How will the game "analyze" the player? Will it track choices? Keywords in player input? Reactions to specific events? Define what data you'll collect and how it will influence the experience. (Be mindful of ethical considerations and player privacy. This should feel like subtle tailoring, not overt surveillance.)
   * Gameplay Loop: Confirm the basic room exploration, description, choice, exit-finding loop. Think about variations you might introduce.
   * Progression & Difficulty: How will each level become more disturbing and challenging? Room complexity? Narrative intensity? Psychological pressure?
* 2. Narrative & World Design:
   * Level Structure Outlines: Plan the general narrative arc for each level. What kind of environment and challenges will characterize each stage?
   * Room Archetypes (Conceptual): Brainstorm room types that fit each level's theme. Level 1 might have mundane rooms like "office" or "street corner." Level 5 might have abstract, symbolic spaces.
   * Event Ideas (Level-Specific): Generate a pool of disturbing or thought-provoking events and scenarios that could occur in rooms of each level.
   * Character Concepts (Optional): If you plan to introduce characters, develop basic concepts for them – their role in the narrative, their psychological impact on the player. Will they be helpful, misleading, or hostile?
   * "Exit" Concept: How will the player recognize the exit in each level? Will it be a visual cue, a textual description, a puzzle, or something else?
* 3. Technical Design & Architecture:
   * Engine & Tools: Unity is chosen. Determine specific libraries or assets you might need (e.g., for text rendering, UI).
   * LLM Integration Plan:
      * Gemini API vs. Local LLM: Decide the primary LLM for narrative generation. Gemini is powerful but requires internet and API keys. Local LLM offers privacy and offline play but might require more setup and resource management. Consider using them in tandem: Gemini for richer, more complex responses, and Local LLM for fallbacks or simpler prompts.
      * API Communication: Plan how Unity will communicate with the chosen LLM(s). REST API calls for Gemini, potential local server setup for a local LLM.
      * Prompt Engineering Strategy: How will you structure prompts to the LLM to generate room descriptions, events, character dialogue, and reactions to player choices? Think about templates and variables to inject game state and player data into prompts.
      * Data Handling: How will you store and manage game state, player choices, and data collected for "analysis"? JSON files, player prefs, or a simple database?
* 4. Prototyping (Crucial!):
   * Core Gameplay Prototype: Build a very basic level (even just a few rooms) to test the core loop: room description, player choice (even simple text input), and navigation.
   * LLM Integration Prototype: Get the LLM communication working in Unity. Test generating basic room descriptions based on simple prompts.
   * "Analysis" Prototype (Simple): If you have an "analysis" mechanic in mind, prototype a basic version. For example, track if the player chooses "aggressive" verbs in input and slightly alter the next room description based on this.
II. Core Systems Development (Production - Early Stage)
* 5. Room Generation System:
   * Room Class/Structure: Define a class or data structure to represent a room. It should hold:
      * Room ID (unique identifier)
      * Description Text (generated by LLM)
      * Possible exits (to other room IDs)
      * Event data (if any)
      * Character data (if any)
      * Keywords/Tags (for thematic consistency and analysis)
   * Room Creation Logic: Implement the logic to create rooms. This could be procedural or pre-defined layouts with LLM-generated content. For increasing room counts per level, you might want a procedural or semi-procedural approach.
   * Exit Generation/Linking: Implement logic to create exits between rooms and connect them to form levels.
* 6. LLM Integration & Prompt Engineering (Advanced):
   * Refined Prompt Templates: Create more complex prompt templates for different room types, events, and character interactions. Include variables for:
      * Level number
      * Room type/theme
      * Game state variables (player choices, progress, etc.)
      * "Analysis" data (e.g., player's dominant choice patterns)
   * Context Management: How will you ensure narrative coherence across rooms within a level? Will you pass context from previous prompts to subsequent ones?
   * Response Parsing: Implement robust parsing to extract relevant narrative text from the LLM's responses and handle potential errors or unexpected outputs.
   * Gemini API & Local LLM Setup: Finalize the integration and setup for both LLMs if you are using both. Optimize API calls and local LLM performance.
* 7. Player Input & Game Logic:
   * Input System: Implement a system for player input (text-based commands, button clicks for predefined actions, or a combination).
   * Command Parser: If using text input, create a parser to understand player commands (e.g., "go north," "examine desk," "talk to figure").
   * Game State Management (Robust): Implement a system to track and update game state effectively. This includes:
      * Current level
      * Current room
      * Player inventory (if any)
      * Level-specific progress flags
      * "Analysis" data
* 8. UI & Text Rendering:
   * Basic UI Design: Create a clean and functional UI to display room descriptions, player input area, and potentially other UI elements (inventory, level progress, etc.).
   * Text Rendering System: Ensure smooth and readable text rendering, potentially with options for formatting (bold, italics) to emphasize certain parts of the description. Consider text scrolling effects for suspense.
III. Content Creation & Level Design (Production - Mid Stage)
* 9. Level Design & Room Population:
   * Level Blueprints: Design the layouts for each level. Consider the increasing number of rooms and complexity. You can use graph-based structures to represent room connections.
   * Room Type Distribution (Level-Based): Plan the distribution of room archetypes within each level to reinforce the level's theme and progression.
   * Event & Character Integration: Place pre-designed events and character encounters within specific rooms or make them procedurally triggered based on room type and level.
   * Exit Placement Strategy: Decide how exits will be placed and hinted at within each level.
* 10. Narrative Content Generation & Iteration:
   * Batch Generation (Initial Content): Use your LLM integration to generate initial room descriptions for a large number of rooms across all levels. This creates a content base to work with.
   * Content Review & Refinement: Review the generated content. Identify areas that are weak, illogical, or don't fit the desired tone. Manually edit or regenerate content as needed.
   * Iterative Prompt Refinement: Based on the generated content, refine your prompt templates to get better and more consistent results from the LLM.
   * "Disturbing" & "Reactive" Content Focus: Specifically focus on generating content that increases in disturbing nature and reactivity as levels progress and based on player "analysis."
IV. Psychological Personalization & Reactivity (Production - Late Stage)
* 11. "Analysis" System Implementation (Detailed):
   * Data Collection Logic: Implement the code to collect data for your "analysis" system. This could involve tracking:
      * Choice frequencies (e.g., "examine," "attack," "flee")
      * Keywords used in player input
      * Time spent in rooms
      * Specific choices in key events
   * Player Profile Creation: Create a simple player profile to store the collected data.
   * Profile Interpretation Logic: Define rules or algorithms to interpret the player profile and identify patterns. (Keep this system subtle and avoid overt labeling of the player's psychology.)
* 12. Reactive Narrative Generation:
   * Profile-Driven Prompts: Modify your prompt templates to incorporate data from the player profile. For example, if the player is consistently choosing "violent" actions, the prompts for later rooms might be adjusted to generate more aggressive or threatening environments or character behaviors.
   * Dynamic Event Triggering: Make certain events or character encounters more or less likely to occur based on the player profile.
   * Subtle Tailoring: The reactivity should feel organic and subtly personalized. Avoid making it too obvious that the game is "analyzing" the player. The goal is to create a psychological atmosphere, not a direct psychological test.
V. Testing, Polish, & Iteration (Post-Production & Ongoing)
* 13. Playtesting & Feedback:
   * Early Playtesting (Core Mechanics): Test the core gameplay loop and LLM integration early on.
   * Targeted Playtesting (Psychological Impact): Have playtesters experience the full levels and provide feedback on the psychological impact, disturbing elements, and the feeling of personalization.
   * Feedback Collection & Analysis: Gather detailed feedback from playtesters. Analyze what works, what doesn't, and where improvements are needed.
* 14. Polish & Refinement:
   * Content Polish: Address issues identified in playtesting. Refine room descriptions, events, and character interactions.
   * UI/UX Polish: Improve the user interface and user experience based on feedback.
   * Bug Fixing & Stability: Thoroughly test and fix bugs. Ensure game stability and smooth performance.
   * Sound Design (Optional but Recommended): Consider adding ambient sounds or subtle sound effects to enhance the atmosphere and psychological tension. Even minimal sound can significantly increase immersion.
* 15. Iteration & Expansion (Optional - Post-Release):
   * Post-Release Feedback: Continue to gather player feedback after release (if you plan to release it).
   * Content Updates: Consider adding more levels, room types, events, or refining the "analysis" system based on player feedback and your ongoing vision for the game.
Key Elements to Highlight:
* Iterative Development: Emphasize that this project will be highly iterative. You'll constantly be prototyping, testing, getting feedback, and refining your design, content, and systems.
* LLM Prompt Engineering is Crucial: The quality of your game heavily depends on effective prompt engineering. Dedicate significant time to designing, testing, and refining prompts.
* Psychological Subtlety: The "analysis" and personalization should be subtle and contribute to the psychological atmosphere, not feel like a direct or intrusive analysis of the player.
* Start Small & Prototype: Begin with a small prototype to prove core concepts before building out the full game.
* Ethical Considerations: Be mindful of the ethical implications of creating a game designed to be disturbing and "analyzing." Ensure responsible design and avoid causing genuine distress to players. Provide clear content warnings if necessary.
* Balancing Gemini & Local LLM: If using both, carefully balance their roles to leverage their strengths and mitigate their weaknesses.




Okay, let's define a base architectural structure for your game code. This will serve as a blueprint for organizing your scripts and components within Unity. We'll use a modular, object-oriented approach to keep things organized and maintainable. This structure is conceptual and can be adapted as you develop.
We can think of the architecture in terms of logical modules or namespaces (if using C# in Unity). Here are the main modules and key classes within them:
I. Game Core Module (Core Logic & Game Flow)
* GameManager (Singleton in Unity):
   * Responsibilities:
      * Manages the overall game flow: Initialization, Level loading, game over, etc.
      * Holds global game state and settings.
      * Orchestrates the interaction between different game modules.
      * Potentially handles game saving and loading.
   * Key Functions:
      * StartGame(): Initializes the game, loads the first level.
      * LoadLevel(levelNumber): Loads and sets up a specific level.
      * NextLevel(): Progresses to the next level.
      * GameOver(reason): Handles game over state.
      * GetGameState(): Provides access to the global game state.
   * Data:
      * currentLevelNumber: Integer representing the current level.
      * gameState: An instance of GameStateManager.
      * References to other manager classes (LevelManager, LLMManager, UIManager, PlayerProfileManager).
* LevelManager:
   * Responsibilities:
      * Manages level loading, setup, and progression.
      * Generates or loads room layouts for each level.
      * Keeps track of the current room.
      * Determines level completion conditions (finding the exit).
   * Key Functions:
      * GenerateLevelLayout(levelNumber): Creates the room structure for a level (could be procedural or pre-defined).
      * LoadRoom(roomID): Loads and sets up a specific room (instantiates Room object, sets current room).
      * MoveToRoom(roomID): Changes the current room and updates UI.
      * FindExitRoom(): Determines the exit room for the current level.
      * IsExitRoom(roomID): Checks if a given room is the exit room.
   * Data:
      * currentLevel: An instance of Level.
      * currentRoom: An instance of Room.
      * levelData: Potentially stores level configuration data (number of rooms, themes, etc.).
* GameStateManager:
   * Responsibilities:
      * Stores and manages the overall game state data that persists across levels.
      * Includes player progress, accumulated "analysis" data, potentially inventory or other persistent attributes.
      * Acts as a central repository for game-world variables.
   * Key Functions:
      * UpdateGameState(data): Updates specific game state variables.
      * GetGameStateVariable(variableName): Retrieves a specific game state variable.
      * ResetGameState(): Resets the game state to a starting condition.
   * Data:
      * levelProgress: Integer representing the highest level reached.
      * playerAnalysisProfile: An instance of PlayerAnalysisProfile.
      * inventory: (If applicable) List of player inventory items.
      * globalFlags: Dictionary or similar structure to store global game flags.
II. Room & Environment Module (World Representation)
* Level:
   * Responsibilities:
      * Represents a single level in the game.
      * Holds a collection of Room objects.
      * Defines the structure and layout of the level (connections between rooms).
      * Potentially stores level-specific themes or settings.
   * Data:
      * levelNumber: Integer level identifier.
      * rooms: Dictionary or List of Room objects, indexed by room ID.
      * roomConnections: Data structure (e.g., adjacency list, adjacency matrix) representing room connections and exits.
      * levelTheme: String or enum defining the level's theme.
      * exitRoomID: ID of the exit room for this level.
* Room:
   * Responsibilities:
      * Represents a single room in the game world.
      * Stores room-specific data: Description text, events, characters, exits.
      * Potentially handles room-specific logic or events.
   * Data:
      * roomID: Unique identifier for the room.
      * descriptionText: String containing the room description (generated by LLM).
      * exits: Dictionary mapping exit directions (e.g., "north", "east") to room IDs.
      * events: List of Event objects or event data associated with this room.
      * characters: List of Character objects present in the room (optional).
      * keywords: List of keywords associated with the room's theme and content (for analysis).
   * Functions:
      * GetDescription(): Returns the room description text.
      * GetExits(): Returns the available exits from the room.
      * TriggerEvents(): Executes any events associated with entering the room.
* Event:
   * Responsibilities:
      * Represents an in-game event that can occur in a room.
      * Can be triggered upon entering a room, interacting with an object, or based on game state.
      * Can modify room descriptions, introduce characters, or trigger further game logic.
   * Data:
      * eventID: Unique identifier for the event.
      * eventType: Enum or string defining the type of event (e.g., "description_update", "character_encounter", "puzzle_challenge").
      * eventData: Data specific to the event type (e.g., new description text, character data, puzzle parameters).
   * Functions:
      * Trigger(gameState, room): Executes the event logic, potentially modifying game state or room based on current conditions.
* Character (Optional):
   * Responsibilities:
      * Represents a character encountered in the game.
      * Stores character-specific data: Name, description, dialogue (potentially LLM-generated), behaviors.
      * Handles interactions with the player.
   * Data:
      * characterID: Unique identifier.
      * characterName: Name of the character.
      * descriptionText: Character description (potentially LLM-generated).
      * dialogue: Potentially a dialogue tree or system for LLM-driven dialogue.
   * Functions:
      * Interact(playerInput, gameState): Handles player interaction with the character, potentially generating dialogue responses or triggering events.
III. Player Interaction Module (Input & Output)
* PlayerInputManager:
   * Responsibilities:
      * Handles player input (text commands, button presses).
      * Parses player commands and translates them into game actions.
      * Potentially provides input suggestions or command completion.
   * Key Functions:
      * ProcessInput(inputString): Takes player input as a string.
      * ParseCommand(inputString): Breaks down the input string into a command and arguments.
      * ExecuteCommand(command, arguments): Calls the appropriate game logic based on the parsed command.
   * Data:
      * commandDictionary: Mapping of recognized commands (e.g., "go", "examine", "take") to corresponding game actions.
* UIManager:
   * Responsibilities:
      * Manages the user interface elements: Displaying room descriptions, input area, feedback messages, menus.
      * Handles text rendering and UI layout.
      * Potentially manages sound and visual effects related to UI.
   * Key Functions:
      * DisplayRoomDescription(descriptionText): Shows the room description in the UI.
      * DisplayMessage(messageText): Shows feedback messages to the player.
      * GetPlayerInput(): Retrieves player input from the UI input field.
      * ClearUI(): Clears UI elements.
   * Data:
      * References to UI elements (Text areas, Input fields, etc. in Unity).
IV. AI Integration Module (LLM Interaction)
* LLMManager:
   * Responsibilities:
      * Manages communication with the LLM (Gemini API and/or Local LLM).
      * Handles prompt construction and sending to the LLM.
      * Parses LLM responses to extract relevant narrative content.
      * Potentially manages API keys, rate limiting, and fallback mechanisms.
   * Key Functions:
      * GenerateRoomDescription(roomContext, gameState): Constructs a prompt for room description and sends it to the LLM. Parses the response and returns the description text.
      * GenerateEventDescription(eventContext, gameState): Similar for event descriptions.
      * GenerateCharacterDialogue(characterContext, playerInput, gameState): For character dialogue.
      * SetLLMProvider(providerType): Allows switching between Gemini API or Local LLM.
   * Data:
      * currentLLMProvider: Enum or String indicating the active LLM provider (Gemini, LocalLLM).
      * API keys (securely stored and managed).
      * Prompt templates for different content types (room descriptions, events, dialogue).
V. Player Profile & Analysis Module (Personalization)
* PlayerProfileManager:
   * Responsibilities:
      * Manages the player's "analysis" profile data.
      * Collects data about player choices and actions during gameplay.
      * Analyzes collected data to identify player tendencies and patterns.
      * Provides player profile data to other modules (like LLMManager) for personalization.
   * Key Functions:
      * TrackPlayerChoice(choiceType, choiceDetails): Records a player's choice (e.g., "action": "examine", "target": "desk").
      * AnalyzePlayerProfile(): Processes collected data to update player profile variables (e.g., "aggressionLevel", "curiosityLevel").
      * GetPlayerProfile(): Returns the current player profile data.
      * ResetPlayerProfile(): Resets the player profile.
   * Data:
      * playerAnalysisProfile: An instance of PlayerAnalysisProfile.
* PlayerAnalysisProfile:
   * Responsibilities:
      * Stores the data collected for player analysis.
      * Holds variables representing different aspects of the player's "psychological profile" as inferred by the game.
   * Data:
      * choiceFrequencies: Dictionary or counters to track frequencies of different choice types.
      * keywordUsage: Tracking keywords used in player input.
      * aggressionLevel: Inferred level of player aggression (based on choices).
      * curiosityLevel: Inferred curiosity level.
      * fearLevel: (Potentially) Inferred fear response level based on reactions to events.
      * ... and other psychological variables you want to track.
Example Class Diagram (Simplified - Conceptual):






+-----------------+     +-----------------+     +-----------------+
|   GameManager   |---->|   LevelManager  |---->|   RoomManager   |
+-----------------+     +-----------------+     +-----------------+
| - gameState     |     | - currentLevel  |     | - currentRoom   |
| - levelManager  |     | - currentRoom   |     | ...             |
| - llmManager    |     | ...             |     +-----------------+
| - uiManager     |     +-----------------+             ^
| ...             |             ^                         |
+-----------------+             |                         |
                                 |                         |
+-----------------+             |       +---------------+     +-------------+
|   Level         |-------------+-------|      Room     |<----|    Event    |
+-----------------+                     +---------------+     +-------------+
| - levelNumber   |                     | - description |     | - eventType |
| - rooms         |                     | - exits       |     | - eventData |
| - roomConnections|                     | - events      |     | ...         |
| ...             |                     | ...         |     +-------------+
+-----------------+                     +---------------+
                                          ^
+-----------------+                         |
|   LLMManager    |-------------------------+
+-----------------+
| - llmProvider   |
| - promptTemplates|
| ...             |
+-----------------+

+-----------------+     +---------------------+     +-----------------------+
| PlayerInputMgr  |---->|    UIManager        |<----|    GameStateManager   |
+-----------------+     +---------------------+     +-----------------------+
| - commandDict   |     | - uiElements        |     | - levelProgress         |
| ...             |     | ...                 |     | - playerAnalysisProfile |
+-----------------+     +---------------------+     | - ...                   |
                                                      +-----------------------+
                                                               ^
                                                               |
                                               +---------------------------+
                                               |   PlayerAnalysisProfile   |
                                               +---------------------------+
                                               | - choiceFrequencies       |
                                               | - keywordUsage            |
                                               | - aggressionLevel         |
                                               | - ...                     |
                                               +---------------------------+


Important Considerations:
* Unity Specifics: This is a general structure. In Unity, you'll implement these classes as MonoBehaviours attached to GameObjects or as ScriptableObjects for data containers. Singletons (like GameManager) are often implemented using static instances in Unity.
* Flexibility and Iteration: This structure is a starting point. Be prepared to adapt and modify it as you develop your game and learn what works best.
* Modular Design: The modular approach allows you to work on different parts of the game independently and makes it easier to debug and extend.
* Communication: Define clear interfaces for communication between modules. For example, UIManager should communicate with PlayerInputManager and LevelManager to display information and react to player actions.
* Data Flow: Think about how data flows through your game. Player input goes to PlayerInputManager, commands are executed by LevelManager or GameManager, room descriptions are generated by LLMManager and displayed by UIManager, etc.
* Error Handling: Implement robust error handling, especially when interacting with external APIs like Gemini and when parsing player input.


LLM Prompting Algorithm for Your Psychological Horror Game
Here's a detailed algorithm for LLM prompting, covering theme selection (indirectly), level creation, room generation, and encounters, along with prompt examples and LLM allocation strategies:
I. Theme Selection & Level Setup (Game Design & Pre-processing - Not Directly LLM Prompting, but essential context)
1. Define Level Themes: For each of your 5 levels, clearly define the core psychological theme and tone you want to evoke (as outlined in the initial plan - Anxiety, Isolation, Existential Dread, etc.). Store these themes.
   * Example:
      * Level 1: Theme = "Surface Anxiety", Tone = "Mundane Dread", Keywords = ["office", "street", "clock", "waiting", "silence"]
      * Level 2: Theme = "Isolation", Tone = "Paranoia", Keywords = ["empty", "echo", "whispers", "watching", "shadows"]
2. Level Structure Design: For each level, decide:
   * Number of Rooms: Increasing with each level.
   * Room Layout/Connections: Can be procedural (e.g., using graph algorithms) or pre-designed layouts.
   * Overall Narrative Arc (Optional): A general progression for events and disturbing elements within the level.
II. Room Generation Algorithm (Per Room)
This algorithm is triggered when the LevelManager needs to generate a new room or load a room for the player.
1. Gather Context for Prompting:
   * Current Level Theme: Retrieve the theme defined for the current level.
   * Room Archetype/Type (Optional but Recommended): Define a set of room archetypes relevant to each level's theme. Examples:
      * Level 1 (Surface Anxiety): "Overcrowded Office", "Empty Waiting Room", "Silent Street Corner", "Distorted Mirror"
      * Level 2 (Isolation): "Infinite Corridor", "Room with a Single Door", "Cell with Whispers", "Hall of Eyes"
      * (You can pre-define these or have a system to procedurally choose archetypes fitting the theme)
   * Game State Variables: Relevant variables from GameStateManager, like levelProgress, playerAnalysisProfile (e.g., aggressionLevel, curiosityLevel).
   * Previous Room Description (Optional for Coherence): If you want narrative flow, you might include the description of the room the player just left to hint at continuity or contrast.
2. Construct Room Description Prompt: Use a prompt template with placeholders for the gathered context.
Example Room Description Prompt Template (for Gemini - aiming for richer descriptions):
Code snippet
You are a text adventure game narrative generator specializing in psychological horror.
The player is entering a new room in Level {level_number}, themed "{level_theme}".
The overall tone of this level is "{level_tone}".
The room archetype is "{room_archetype}".

Considering the player's psychological profile, which currently indicates:
- Aggression Level: {player_aggression_level}
- Curiosity Level: {player_curiosity_level}
- [Other relevant profile variables]

Describe this room in vivid detail, focusing on sensory details and unsettling atmosphere.
The description should evoke feelings of {emotion related to level theme, e.g., anxiety, isolation, dread}.
Keep the description concise yet impactful, approximately 3-5 sentences.
Highlight potentially disturbing or unusual elements within the room.

[Optional: Briefly mention the previous room if you want to create a sense of transition: "Coming from a room described as [previous_room_description], you now find yourself in:"]

Generate the room description:

   * Placeholders to Replace:
   * {level_number}, {level_theme}, {level_tone}: From Level definition.
   * {room_archetype}: Selected room archetype.
   * {player_aggression_level}, {player_curiosity_level}: From PlayerAnalysisProfile.
   * {emotion related to level theme}: Word or short phrase like "intense anxiety", "profound isolation", "existential dread".
   * [previous_room_description]: (Optional) Description of the previous room.
   3. Send Prompt to LLM & Get Response: Send the constructed prompt to your chosen LLM. For room descriptions aiming for rich detail and psychological depth, Gemini is likely the better choice.
   4. Parse and Store LLM Output:
   * Extract the generated room description text from the LLM's response.
   * Store the description text in the Room object's descriptionText field.
III. Encounter Generation Algorithm (Conditional - within a Room)
This algorithm determines if and what kind of encounter (event or character) happens when the player enters a room. It's triggered after room description generation.
   1. Determine Encounter Probability: Decide probabilistically if an encounter should occur in the current room. Probability can be influenced by:
   * Level Number: Higher levels = higher encounter probability.
   * Room Archetype: Certain room types might be more likely to have encounters.
   * Game State/Player Profile: e.g., if player is being "too passive," increase encounter chance to push them into action.
   2. Select Encounter Type (Event or Character): If an encounter is triggered, decide if it will be an Event or a Character encounter. Again, can be probabilistic or based on level/room type.
   3. Construct Encounter Prompt (Event - Example):
Example Event Prompt Template (for Gemini or potentially Local LLM if simpler events):
Code snippet
You are creating a disturbing event for a text adventure psychological horror game.
This event is occurring in a room described as: "{room_description}".
The room is part of Level {level_number}, themed "{level_theme}", tone "{level_tone}".
The player's psychological profile suggests:
- [Relevant profile variables, e.g., fearLevel, paranoiaLevel]

Generate a brief, unsettling event that fits the room's atmosphere and the level's theme.
The event should be unexpected and potentially psychologically impactful.
It should not immediately block player progress, but rather enhance the disturbing atmosphere and possibly hint at deeper narrative elements.
Keep the event description to 1-2 sentences.

Generate the event description:

      * Placeholders to Replace:
      * {room_description}: The description of the current room (just generated).
      * {level_number}, {level_theme}, {level_tone}: Level definition.
      * [Relevant profile variables] : Profile data relevant to event type.
      4. Construct Encounter Prompt (Character - Example):
Example Character Encounter Prompt Template (for Gemini - for more complex characters and dialogue):
Code snippet
You are creating a character encounter for a text adventure psychological horror game.
This character appears in a room described as: "{room_description}".
The room is part of Level {level_number}, themed "{level_theme}", tone "{level_tone}".
The player's psychological profile is:
- [Relevant profile variables]

Create a brief description of a character who is present in this room.
The character should be unsettling and fit the overall tone of the level.
They might be helpful, misleading, or hostile, but their motivations should be ambiguous at first.
Also, generate a single line of dialogue for the character to say upon the player's entry into the room.
The dialogue should be short, enigmatic, and contribute to the unsettling atmosphere.

Output format should be:
Character Description: [Character Description text]
Character Dialogue: [Character Dialogue text]

         * Placeholders to Replace: Same as Event prompt, plus:
         * [Relevant profile variables] relevant to character interaction (e.g., curiosityLevel, aggressionLevel).
         5. Send Prompt to LLM & Get Response: Send the chosen encounter prompt (Event or Character) to the LLM. For characters and more complex events requiring nuanced language and potentially dialogue, Gemini is highly recommended. For simpler, atmospheric events, a local LLM might suffice.
         6. Parse and Store Encounter Output:
         * For Events: Extract the event description and store it in the Room object's events list or trigger it immediately.
         * For Characters: Parse the character description and dialogue. Create a Character object, populate it with the data, and add it to the Room's characters list.
IV. LLM Output Handling & Usage:
         1. Text Parsing: Implement robust text parsing to extract the desired information from the LLM's responses. For room descriptions and event descriptions, simply extract the main text block. For character encounters, parse for "Character Description:" and "Character Dialogue:" sections as defined in the prompt template.
         2. Display in UI: The extracted room description, event descriptions, and character dialogue are then passed to the UIManager to be displayed to the player.
         3. Game Logic Integration:
         * Events: Event descriptions can be shown as part of the room description or triggered separately. Events can modify the room (e.g., update description), introduce new characters, or set flags in the GameStateManager to influence future content.
         * Characters: Character objects become interactive elements in the game. Player interactions with characters (using PlayerInputManager and Command Parser) can trigger further LLM prompts for dialogue generation or character actions.
V. LLM Allocation Strategy (Gemini vs. Local LLM):
         * Gemini (Cloud API):
         * Use For:
         * Room Descriptions: For rich, evocative, and thematically nuanced descriptions. Gemini excels at detailed and creative text generation.
         * Character Encounters: For complex character descriptions and dialogue, where quality and nuanced language are important for psychological impact.
         * Complex Events: For events that require more creative writing and nuanced integration into the narrative.
         * Advantages: Higher quality output, potentially better understanding of complex prompts and context.
         * Disadvantages: API calls, latency, requires internet, potential cost, less privacy.
         * Local LLM (Run Locally):
         * Use For:
         * Simpler Events: For basic atmospheric events, sound descriptions, or simpler changes to the environment.
         * Fallback Descriptions: If Gemini API fails or is too slow, use a local LLM to generate a simpler, fallback room description.
         * Potentially Player Analysis (Privacy-Sensitive): If you perform any player profile analysis using an LLM (though simpler rule-based analysis is likely sufficient), a local LLM might be preferred for privacy.
         * Advantages: Privacy, offline capability, no API costs, lower latency (potentially, depending on hardware).
         * Disadvantages: Potentially lower quality output compared to Gemini, might require more setup and resource management, hardware limitations.
Example Flow - Entering a New Room:
         1. LevelManager calls RoomManager to load Room ID "R123" in Level 2.
         2. RoomManager prepares context: Level 2 Theme="Isolation", Room Archetype="Empty Waiting Room", Player Profile (aggression: low, curiosity: high).
         3. RoomManager constructs Room Description Prompt using the template and context.
         4. RoomManager sends prompt to LLMManager (specifying Gemini as provider).
         5. LLMManager sends API request to Gemini, gets response.
         6. LLMManager parses response, extracts description text.
         7. RoomManager creates Room object for "R123", sets descriptionText.
         8. RoomManager (or LevelManager) determines encounter probability (based on level, room type, etc.). Let's say an event is triggered.
         9. RoomManager prepares context for Event Prompt (room description, level theme, player profile).
         10. RoomManager constructs Event Prompt using the template and context.
         11. RoomManager sends event prompt to LLMManager (could use local LLM for a simpler event in this example to save Gemini API calls, or still use Gemini for consistent quality).
         12. LLMManager sends prompt, gets response, parses event description.
         13. RoomManager adds the event data to the Room object "R123" or triggers the event immediately.
         14. UIManager receives Room object from LevelManager and displays the room description and event (if any) to the player.
Iterative Refinement is Key:
These prompts and algorithms are a starting point. You'll need to:
         * Experiment: Test different prompt variations, LLM providers, and room archetypes.
         * Playtest: Get feedback from playtesters on the room descriptions, events, and the overall atmosphere.
         * Refine: Based on testing and feedback, iteratively refine your prompts, algorithms, and LLM strategy to achieve the desired psychological horror experience. Pay attention to the balance between disturbing content, player agency, and narrative coherence.